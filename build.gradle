// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    id 'com.android.application' version '7.4.2' apply false
    id 'com.android.library' version '7.4.2' apply false
    id 'org.jetbrains.kotlin.android' version '2.2.20' apply false
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

allprojects {
    afterEvaluate {

    }

}

ext {
    pluginExportPath = project.hasProperty('pluginExportPath') ? project.property('pluginExportPath') : null
    aarExportPath = project.hasProperty('pluginExportPath') ? project.property('pluginExportPath') + '\\poing-godot-admob-libs'  : null
}

task exportAar(type: Copy) {
    def aarFiles = []
    subprojects { subproject ->
        if (subproject.file("src").exists() && subproject.name != "core") {
            def moduleAarDir = subproject.file("build/outputs/aar")
            aarFiles.addAll(fileTree(moduleAarDir) {
                include '*release.aar'
            })
        }
    }
    from aarFiles
    into aarExportPath
}

task exportGdap(type: Copy) {
    def gdapFiles = []
    subprojects { subproject ->
        if (subproject.file("src").exists()) {
            def configGdapDir = subproject.file("config")
            gdapFiles.addAll(fileTree(configGdapDir) {
                include '*.gdap'
            })
        }
    }
    from gdapFiles
    into pluginExportPath
}


task exportFiles(dependsOn: [exportAar, exportGdap])

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(exportFiles)) {
        if (pluginExportPath == null) {
            throw new GradleException("The export path for AAR files is not defined. Use the command './gradlew exportFiles -PpluginExportPath=<desired-path>' to export the AAR files.")
        }
        println "Exporting AAR files to: $pluginExportPath"
    }
}

task zipPlugins(type: Zip) {
    def godotVersion = project.hasProperty("godotVersion") ? project.getProperty("godotVersion") : ""
    def zipFileName = "poing-godot-admob-android${godotVersion ? '-v' + godotVersion : ''}.zip"

    archiveFileName.set(zipFileName)
    destinationDirectory.set(file("${rootProject.projectDir}/.output"))

    subprojects { subproject ->
        if (subproject.file("src").exists() && subproject.name != "core") {
            def moduleAarDir = subproject.file("build/outputs/aar")
            def aarFiles = fileTree(moduleAarDir) {
                include '*release.aar'
            }

            def configGdapDir = subproject.file("config")
            def gdapFiles = fileTree(configGdapDir) {
                include '*.gdap'
            }

            into("${subproject.name}") {
                from(gdapFiles) {
                    include '*.gdap'
                }
                into("poing-godot-admob-libs") {
                    from(aarFiles)
                }
            }
        }
    }
}
